# -*- coding: utf-8 -*-
"""lab_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sYRTsLPPb775-mUuSSqjlVQ63n6Reupp
"""

# Commented out IPython magic to ensure Python compatibility.
# just testing stuff
print('hello world!')  # Print "hello world"

print(5 * 4)  # Multiplying 5 and 4

print(6 / 2)  # Dividing 6 by 2

print(13 + 5 + 7)  # Adding 13, 5, and 7

print(6 ** 2)  # Squaring 6

a = 5. / 2.  # Division to get float result
print(a)

a = [2, 3.2, 'hello', 'eeee']  # List with mixed data types
print(a)

print(len(a))  # Length of the list

print(a[0])  # Accessing the first element of the list

print(a[1:3])  # Slicing the list from index 1 to 2

a[1] = 'goodbye'  # Modifying an element in the list
print(a)

# Playing around with numpy
import numpy as np

p = np.pi  # Assigning the value of pi
print(p)

print(np.sin(p / 2))  # Sine of pi/2

x = np.arange(0., 10., 0.1)  # Creating an array from 0 to 10 with step size 0.1
print(x)

x = np.arange(0., 10.1, 0.1)  # Slightly different range
print(x)

print(x[0:10])  # Slicing the array from 0 to 9

y = np.sin(x)  # Calculating sine of x
print(y)

print(y[0:10])  # First 10 values of the sine array

# Statistical calculations
print(np.max(x))  # Maximum value in x
print(np.min(x))  # Minimum value in x
print(np.mean(x))  # Mean value of x
print(np.mean(x[0:10]))  # Mean of first 10 values in x
print(np.median(x))  # Median of x

print(np.max(y))  # Maximum value in y
print(np.min(y))  # Minimum value in y
print(np.mean(y))  # Mean value of y
print(np.mean(y[0:10]))  # Mean of first 10 values in y
print(np.median(y))  # Median of y

# Plotting
import matplotlib.pyplot as plt
# %matplotlib inline

plt.plot(x, y)  # Plotting sine curve
plt.xlabel('x')
plt.ylabel('sin(x)')
plt.title('Sine wave')

y2 = np.cos(x)  # Cosine of x
plt.plot(x, y, 'r', x, y2, 'b')  # Plotting both sine and cosine curves
plt.xlabel('x')
plt.ylabel('y')
plt.title('sin (red) cos (blue)')

# Reading data files
filename = '/scholar/scratch/aorton/431/SHV.txt'
data = np.genfromtxt(filename, delimiter=',', skip_header=4)  # Skipping first 4 lines
press_mb = data[:, 0]  # Pressure in millibars
height_m = data[:, 1]  # Height in meters
temp_C = data[:, 2]  # Temperature in Celsius
dewpt_C = data[:, 3]  # Dewpoint in Celsius

filename = '/scholar/scratch/kelshark/SHVnew.txt'
data = np.genfromtxt(filename, delimiter=',', skip_header=4)  # Reading new data file
press_mb = data[:, 0]
height_m = data[:, 1]
temp_C = data[:, 2]
dewpt_C = data[:, 3]
wind_dir_deg = data[:, 4]  # Wind direction in degrees
wind_spd_kt = data[:, 5]  # Wind speed in knots

# More file reading (repeated with different file paths)
filename = '/scholar/scratch/kelshark/EAPS 431/SHVnew.txt'
data = np.genfromtxt(filename, delimiter=',', skip_header=4)
press_mb = data[:, 0]
height_m = data[:, 1]
temp_C = data[:, 2]
dewpt_C = data[:, 3]
wind_dir_deg = data[:, 4]
wind_spd_kt = data[:, 5]

# Data processing for Lab #2
filename = '/scratch/scholar/kelshark/EAPS431/SHV.txt'
data = np.genfromtxt(filename, delimiter=',', skip_header=1)  # Skipping header
press_mb = data[:, 1]
height_m = data[:, 2]
temp_C = data[:, 3]
dewpt_C = data[:, 4]

print(temp_C)  # Print temperature data
print(data)  # Print full data array

# Defining constants
Rd = 287  # Gas constant for dry air in J/(kgÂ·K)

# Convert temperatures to Kelvin
temp_K = temp_C + 273.15
print(temp_K)  # Print temperature in Kelvin

# Additional calculations
height_km = height_m / 1000  # Convert height to kilometers
press_Pa = press_mb * 100  # Convert pressure to Pascals
dewpt_K = dewpt_C + 273.15  # Convert dewpoint to Kelvin

density = press_Pa / temp_K / Rd  # Calculate air density
print(density)
print(density[0])  # Print first density value

# Display lowest layer information
print("Lowest layer", press_Pa[0], temp_K[0], density[0])

# Statistical analysis of pressure and temperature
print(min(press_Pa))  # Minimum pressure
print(np.max(temp_K))  # Maximum temperature
print(np.max(press_Pa))  # Maximum pressure
print(np.max(temp_K))  # Maximum temperature again
print(np.max(density))  # Maximum density

# Plotting Temperature and Dewpoint vs. Height
plt.plot(temp_K, 'r', dewpt_K, 'g', height_km, 'b')
plt.xlabel(height_km)
plt.ylabel('Temperature and Dewpoint')
plt.title('Temperature and Dewpoint (red and blue) vs. height (green)')

# Calculate Dewpoint Depression
temp_F = (temp_K - 273.15) * (9 / 5) + 32  # Convert temperature to Fahrenheit
dewpt_F = (dewpt_K - 273.15) * (9 / 5) + 32  # Convert dewpoint to Fahrenheit
dewd = temp_F - dewpt_F  # Dewpoint depression

print(np.mean(dewd))  # Mean dewpoint depression
plt.plot(dewd, 'r', height_km, 'b')
plt.xlabel('Height')
plt.ylabel('Dewpoint Depression')
plt.title('Dewpoint Depression (red) vs. Height (blue)')

# Plotting Temperature and Dewpoint vs. Height again
plt.plot(temp_K, 'r', dewpt_K, 'g', height_km, 'b')
plt.xlabel(height_km)
plt.ylabel('Temperature and Dewpoint')
plt.title('Temperature and Dewpoint (red and blue) vs. height (green)')

# Plotting Temperature vs Height
plt.plot(temp_K, 'r', height_km, 'b')
plt.xlabel('Height (km)')
plt.ylabel('Temperature (K)')
plt.title('Temperature (red) vs. height (blue)')

# Atmospheric calculations for H (scale height)
g = 9.81  # Gravitational acceleration (m/s^2)
meantemp_K = 254.48774193548385  # Mean temperature in Kelvin
H = (Rd * meantemp_K) / g  # Scale height
print(meantemp_K)
print(H)

# Pressure top and bottom calculations
e = 2.718281828459045  # Euler's number
(minpztop) = (np.min(press_mb))  # Minimum pressure at top
print(minpztop)
maxpzbot = (minpztop) * (e ** (180 / H2))  # Pressure at bottom
maxtemp_K = 296.39  # Maximum temperature in Kelvin

H2 = (Rd * maxtemp_K) / g  # Calculate H for max temperature
print(H2)

# Plotting Pressure vs Height
plt.plot(press_Pa, 'r', height_km, 'b')
plt.xlabel('Height (km)')
plt.ylabel('Pressure (Pa)')
plt.title('Pressure (red) vs. height (blue)')