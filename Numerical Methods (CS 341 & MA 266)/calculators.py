# -*- coding: utf-8 -*-
"""Calculators.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bAdDhCEEqrBsy0yHbgh1Dhe7fdCVXUVt

Derivative calculator
"""

import sympy as sp
def compute_derivatives(func, var, num_derivatives=8):
    derivatives = []
    current_derivative = func
    for i in range(num_derivatives):
        current_derivative = sp.diff(current_derivative, var)
        derivatives.append(current_derivative)
    return derivatives

if __name__ == "__main__":
    x = sp.symbols('x')
    f = sp.exp(2**x) #function

    derivatives = compute_derivatives(f, x, 8)

    for i, derivative in enumerate(derivatives, 1):
        print(f"{i}th derivative: {derivative}")

"""Secant Method Calculator"""

# Function to compute x_k+1 using the secant method formula
def secant_method(x_k, x_k_minus_1, f):
    f_x_k = f(x_k)
    f_x_k_minus_1 = f(x_k_minus_1)
    x_k_plus_1 = x_k - (f_x_k * (x_k - x_k_minus_1)) / (f_x_k - f_x_k_minus_1)
    return x_k_plus_1

# Function definition for f(x) = x^3 - 5x - 4
def f(x):
    return x**3 - 5*x - 4

# Input values from the user
x_k = float(input("Enter the value of x_k: "))
x_k_minus_1 = float(input("Enter the value of x_(k-1): "))

# Calculate x_k+1 using the secant method
x_k_plus_1 = secant_method(x_k, x_k_minus_1, f)

# Output the result
print(f"The value of x_(k+1) is: {x_k_plus_1}")

"""Newton's Method Calculator"""

def f(x):
    return x**3 - 5*x - 4

def f_prime(x):
    return 3*x**2 - 5

def newtons_method(x_k, tolerance=1e-7, max_iterations=10):
    for iteration in range(max_iterations):
        f_x_k = f(x_k)
        f_prime_x_k = f_prime(x_k)

        if f_prime_x_k == 0:
            print("Derivative is zero. No solution found.")
            return None

        x_k_plus_1 = x_k - f_x_k / f_prime_x_k

        print(f"Iteration {iteration + 1}: x_k = {x_k}, x_k+1 = {x_k_plus_1}, f(x_k) = {f_x_k}")

        if abs(x_k_plus_1 - x_k) < tolerance:
            print("Convergence reached.")
            return x_k_plus_1

        x_k = x_k_plus_1

    print("Maximum iterations reached.")
    return x_k

initial_guess = 4
result = newtons_method(initial_guess)

if result is not None:
    print(f"The root found is: {result}")

"""Taylor Expansion Calculator"""

import sympy as sp

def taylor_expansion(func, var, point=0, order=8):
    """
    Returns the Taylor expansion of a function up to the specified order.

    Parameters:
    func (sympy expression): The function to expand.
    var (sympy symbol): The variable of the function.
    point (int, optional): The point to expand around (default is 0).
    order (int, optional): The order of the expansion (default is 8).

    Returns:
    sympy expression: The Taylor expansion of the function.
    """
    taylor_series = func.series(var, point, order+1).removeO()
    return taylor_series

# Example usage
x = sp.symbols('x')  # Define the variable
f = sp.sin(x)  # Example function

# Get Taylor expansion of f(x) = sin(x) around x = 0 up to 8th derivative
taylor_series = taylor_expansion(f, x, point=0, order=8)
print(taylor_series)